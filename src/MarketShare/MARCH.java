package MarketShare;

import java.io.*;
import java.util.StringTokenizer;

/**
 * Created by asoni on 31-3-16.
 */
public class MARCH {
    public static void main(String[] args) {
        InputReader in = new InputReader(System.in);
        PrintWriter out = new PrintWriter(System.out);
        StringBuilder bob = new StringBuilder(1000000);
        StringBuilder alice = new StringBuilder(1000000);
        alice.append
        bob.append
        int bSize = bob.length();
        int aSize = alice.length();
        for (int i = 0; true; ) {
            if(bob.length() == 1 || alice.length() == 1){
                out.println(bob.charAt(i));
                out.println(alice.charAt(i));
            }
            if (alice.length() == 0 || bob.length() == 0)
                break;
            if (bob.charAt(i) > alice.charAt(i)) {
                bob.append(bob.charAt(i));
                bob.append(alice.charAt(i));
            } else if (alice.charAt(i) > bob.charAt(i)) {
                alice.append(alice.charAt(i));
                alice.append(bob.charAt(i));
            }
            alice.deleteCharAt(i);
            bob.deleteCharAt(i);
        }
        out.println("alice"+alice.length());
        out.println("bob"+bob.length());
        out.close();
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

    }
}

